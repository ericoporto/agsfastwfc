# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc

trigger:
  branches:
    include:
      - refs/heads/*
      - refs/tags/*

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-16.04'
    mac:
      imageName: 'macos-10.13'
    windows:
      imageName: 'windows-2019'

pool:
  vmImage: $(imageName)

steps:
# Linux
- bash: |
    sudo add-apt-repository ppa:ubuntu-toolchain-r/test
    sudo apt-get update
    sudo apt-get install gcc-8 g++-8
    which gcc-8
    which g++-8
    export CC=`which gcc-8`
    export CXX=`which g++-8`
    pushd ..
    git clone https://github.com/adventuregamestudio/ags.git
    pushd ags
    git checkout release-3.5.0
    popd
    popd
    pushd agsfastwfc
    pushd fastwfc
    cmake .
    sudo make install
    popd
    make
    popd
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: 'make'

- task: CopyFiles@2
  condition: eq( variables['Agent.OS'], 'Linux' )
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/agsfastwfc'
    contents: 'libagsfastwfc.so'
    targetFolder: $(Build.ArtifactStagingDirectory)

# macOS
- bash: |
    pushd ..
    git clone https://github.com/adventuregamestudio/ags.git
    pushd ags
    git checkout release-3.5.0
    popd
    popd
    pushd agsfastwfc
    pushd fastwfc
    cmake .
    make install
    popd
    make
    popd
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: 'make'

- task: CopyFiles@2
  condition: eq( variables['Agent.OS'], 'Darwin' )
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/agsfastwfc'
    contents: 'libagsfastwfc.dylib'
    targetFolder: $(Build.ArtifactStagingDirectory)

# Windows
- bash: |
    pushd ..
    git clone https://github.com/adventuregamestudio/ags.git
    pushd ags
    git checkout release-3.5.0
    popd
    popd
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: 'prepareTask'

- task: VSBuild@1
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  inputs:
    solution: 'agsfastwfc.sln'
    platform: x86
    configuration: Release

- task: CopyFiles@2
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/Release'
    contents: 'agsfastwfc.dll'
    targetFolder: $(Build.ArtifactStagingDirectory)

- bash: |
    echo "##vso[task.setvariable variable=tagname]$(git describe --tags $(git rev-list --tags --max-count=1))"
# Upload to Github Release
- task: GithubRelease@0
  displayName: 'Create GitHub Release'
  inputs:
    tagSource: 'auto'
    tag: $(tagname)
    assetUploadMode: 'replace'
    action: 'edit'
    gitHubConnection: agsfastwfc
    repositoryName: ericoporto/agsfastwfc
    assets: |
         $(Build.ArtifactStagingDirectory)/*.dll
         $(Build.ArtifactStagingDirectory)/*.so
         $(Build.ArtifactStagingDirectory)/*.dylib
