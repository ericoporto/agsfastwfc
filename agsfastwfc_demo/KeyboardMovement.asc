// Main script for module 'KeyboardMovement'

// define direction vectors
KeyboardMovementDirection direction;

// stores current walking direction of player character and a multiplier
Vector* move;
int distance;

// track the previous key press for Tapping mode
int lastkey = 0;
bool keydown = false;

// stores current keyboard control mode (disabled by default)
KeyboardMovementMode mode = eKeyboardMovementModeNone;

void set_Mode(this KeyboardMovement*, KeyboardMovementMode newmode)
{
  mode = newmode;
}

KeyboardMovementMode get_Mode(this KeyboardMovement*)
{
  return mode;
}

// store keymap
KeyboardMovementKeymap keymap;

// up
void set_KeyUp(this KeyboardMovement*, eKeyCode up)
{
  keymap.KeyUp = up;
}
eKeyCode get_KeyUp(this KeyboardMovement*)
{
  return keymap.KeyUp;
}

// down
void set_KeyDown(this KeyboardMovement*, eKeyCode down)
{
  keymap.KeyDown = down;
}
eKeyCode get_KeyDown(this KeyboardMovement*)
{
  return keymap.KeyDown;
}

// left
void set_KeyLeft(this KeyboardMovement*, eKeyCode left)
{
  keymap.KeyLeft = left;
}
eKeyCode get_KeyLeft(this KeyboardMovement*)
{
  return keymap.KeyLeft;
}

// right
void set_KeyRight(this KeyboardMovement*, eKeyCode right)
{
  keymap.KeyRight = right;
}
eKeyCode get_KeyRight(this KeyboardMovement*)
{
  return keymap.KeyRight;
}

Vector* make_vector(int x, int y)
{
  Vector* vector = new Vector;
  vector.x = x;
  vector.y = y;
  
  return vector;
}

function set_direction(Vector* vector)
{
  move.x = vector.x;
  move.y = vector.y;
}

function apply_direction(Vector* vector)
{
  move.x += vector.x;
  move.y += vector.y;
}

function stop_moving()
{
  Vector* stopped = make_vector(move.x * -1, move.y * -1);
  apply_direction(stopped);
}

function game_start()
{
  // initialise move
  move = make_vector(0, 0);
  
  // setup directions
  direction.Up = make_vector(0, -1);
  direction.Down = make_vector(0, 1);
  direction.Left = make_vector(-1, 0);
  direction.Right = make_vector(1, 0);

  // setup default keys
  keymap.KeyDown = eKeyDownArrow;
  keymap.KeyLeft = eKeyLeftArrow;
  keymap.KeyRight = eKeyRightArrow;
  keymap.KeyUp = eKeyUpArrow;
}

function repeatedly_execute()
{
  if (mode == eKeyboardMovementModeTapping)
  {
    // if a key was pressed in tapping mode, check if it is still down
    if (lastkey > 0 && !IsKeyPressed(lastkey))
    {
      lastkey = 0;
      keydown = false;
    }
    else
    {
      keydown = true;
    }
  }

  if (IsGamePaused() || mode != eKeyboardMovementModePressing || !IsInterfaceEnabled() || player.on == 0)
  {
    return;
  }

  Vector* old = make_vector(move.x, move.y);
  stop_moving();
  
  if (IsKeyPressed(keymap.KeyDown))
  {
    apply_direction(direction.Down);
  }
  
  if (IsKeyPressed(keymap.KeyLeft))
  {
    apply_direction(direction.Left);
  }
  
  if (IsKeyPressed(keymap.KeyRight))
  {
    apply_direction(direction.Right);
  }
  
  if (IsKeyPressed(keymap.KeyUp))
  {
    apply_direction(direction.Up);
  }

  if (old.x != move.x || old.y != move.y)
  {
    player.WalkStraight(player.x + move.x * distance, player.y + move.y * distance, eNoBlock);
  }
}

function on_key_press(int keycode)
{ 
  if (lastkey > 0 || IsGamePaused() || mode != eKeyboardMovementModeTapping || !IsInterfaceEnabled() || player.on == 0)
  {
    return;
  }

  Vector* next;

  if (keycode == keymap.KeyDown)
  {
    next = direction.Down;
  }
  else if (keycode == keymap.KeyLeft) 
  {
    next = direction.Left;
  }
  else if (keycode == keymap.KeyRight)
  {
    next = direction.Right;
  }
  else if (keycode == keymap.KeyUp)
  {
    next = direction.Up;
  }
  
  if (next == null || (next.x == move.x && next.y == move.y))
  {
    stop_moving();
  }
  else
  {
    set_direction(next);
  }

  player.WalkStraight(player.x + move.x * distance, player.y + move.y * distance, eNoBlock);
  lastkey = keycode;
}

function on_event(EventType event, int data)
{
  if (event == eEventLeaveRoom) 
  {
    stop_moving();
  }
  else if (event == eEventEnterRoomBeforeFadein)
  {
    if (Room.Height > Room.Width)
    {
      distance = Room.Height * 2;
    }
    else
    {
      distance = Room.Width * 2;
    }
  }
}
